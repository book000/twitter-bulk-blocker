#!/bin/bash

# check-cinnamon-fast - 超高速版Cinnamonサーバー監視コマンド
# 目標: 15秒以下での実行完了
# 最適化: 並列処理、最小限の出力、効率的なデータ収集

set -e

# 開始時刻記録
START_TIME=$(date +%s)

# カラー定義（最小限）
R='\033[0;31m'  # Red
G='\033[0;32m'  # Green
Y='\033[1;33m'  # Yellow
B='\033[0;34m'  # Blue
N='\033[0m'     # No Color

echo "=== CINNAMON FAST CHECK ==="
echo "Time: $(date '+%Y-%m-%d %H:%M:%S')"

# SSHコントロールマスター設定
SSH_OPTS="-o ControlMaster=auto -o ControlPath=/tmp/ssh-cinnamon-%r@%h:%p -o ControlPersist=30s"

# バックグラウンドでSSH接続を確立
ssh $SSH_OPTS Cinnamon "echo 'SSH ready'" >/dev/null 2>&1 &
SSH_PID=$!

# 一括データ取得スクリプト
REMOTE_SCRIPT='
# 並列実行のための関数定義
get_containers() {
    echo "===CONTAINERS==="
    docker ps -a --filter "name=bulk-block-users" --format "{{.Names}}|{{.Status}}|{{.State}}"
}

get_errors() {
    echo "===ERRORS==="
    # 最新のエラーのみ（高速化のため最新10件）
    find /var/log/supervisor -name "*.log" -mmin -60 -type f 2>/dev/null | while read log; do
        grep -E "(ERROR|CRITICAL|認証エラー|Cookie|KeyError)" "$log" 2>/dev/null | tail -5
    done | tail -10
}

get_system() {
    echo "===SYSTEM==="
    echo "Load:$(uptime | awk -F"load average:" "{print \$2}")"
    echo "Mem:$(free -h | grep Mem | awk "{print \$3\"/\"\$2}")"
}

get_db_stats() {
    echo "===DB==="
    if [ -f /home/ope/twitter-bulk-blocker/blocker_data.db ]; then
        sqlite3 /home/ope/twitter-bulk-blocker/blocker_data.db "
        SELECT \"Users:\" || COUNT(*) || \"|Blocked:\" || SUM(CASE WHEN is_blocked = 1 THEN 1 ELSE 0 END) FROM users;
        " 2>/dev/null || echo "DB:Error"
    else
        echo "DB:NotFound"
    fi
}

# バックグラウンドで並列実行
get_containers &
get_errors &
get_system &
get_db_stats &

# 全ジョブの完了を待機
wait
'

# SSH接続の準備完了を待つ
wait $SSH_PID 2>/dev/null || true

# リモートスクリプト実行（1回のSSH接続で全データ取得）
ALL_DATA=$(ssh $SSH_OPTS Cinnamon "$REMOTE_SCRIPT" 2>/dev/null)

# データ解析
CONTAINERS=$(echo "$ALL_DATA" | awk '/===CONTAINERS===/{flag=1;next}/===/{flag=0}flag')
ERRORS=$(echo "$ALL_DATA" | awk '/===ERRORS===/{flag=1;next}/===/{flag=0}flag')
SYSTEM=$(echo "$ALL_DATA" | awk '/===SYSTEM===/{flag=1;next}/===/{flag=0}flag')
DB=$(echo "$ALL_DATA" | awk '/===DB===/{flag=1;next}/===/{flag=0}flag')

# 1. コンテナ状態（最重要情報のみ）
echo -e "\n${B}📊 CONTAINERS${N}"
echo "────────────────"
RUNNING=$(echo "$CONTAINERS" | grep -c "Up " || true)
STOPPED=$(echo "$CONTAINERS" | grep -c "Exited" || true)
echo -e "Running: ${G}$RUNNING${N} | Stopped: ${R}$STOPPED${N}"

if [ $STOPPED -gt 0 ]; then
    echo -e "${R}⚠️ Stopped containers:${N}"
    echo "$CONTAINERS" | grep "Exited" | cut -d'|' -f1 | sed 's/^/  • /'
fi

# 2. エラーサマリ（カウントのみ）
echo -e "\n${B}🔍 ERRORS (1h)${N}"
echo "────────────────"
if [ -n "$ERRORS" ]; then
    AUTH=$(echo "$ERRORS" | grep -c "認証エラー\|Cookie" || true)
    CODE=$(echo "$ERRORS" | grep -c "KeyError\|ValueError\|TypeError" || true)
    [ $AUTH -gt 0 ] && echo -e "${R}🔑 Auth errors: $AUTH${N}"
    [ $CODE -gt 0 ] && echo -e "${R}🐛 Code errors: $CODE${N}"
    [ $AUTH -eq 0 ] && [ $CODE -eq 0 ] && echo -e "${G}✅ No errors${N}"
else
    echo -e "${G}✅ No errors${N}"
fi

# 3. システム状態（コンパクト表示）
echo -e "\n${B}💻 SYSTEM${N}"
echo "────────────────"
echo "$SYSTEM" | tr '\n' ' '
echo

# 4. DB統計（1行表示）
echo -e "\n${B}📊 DATABASE${N}"
echo "────────────────"
echo "$DB"

# 5. クイック診断
echo -e "\n${B}🏁 DIAGNOSIS${N}"
echo "────────────────"
STATUS="OK"
[ $STOPPED -gt 0 ] && STATUS="CRITICAL"
[ $AUTH -gt 5 ] 2>/dev/null && STATUS="WARNING"

case $STATUS in
    "OK") echo -e "${G}✅ All systems operational${N}" ;;
    "WARNING") echo -e "${Y}⚠️ Attention required${N}" ;;
    "CRITICAL") echo -e "${R}🚨 Immediate action needed${N}" ;;
esac

# 実行時間
END_TIME=$(date +%s)
echo -e "\n⏱️ Execution time: $((END_TIME - START_TIME))s"

# SSH接続クリーンアップ
ssh -O exit $SSH_OPTS Cinnamon 2>/dev/null || true