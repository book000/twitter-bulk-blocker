#!/bin/bash

# check-cinnamon - Cinnamonサーバー包括監視コマンド
# ドキュメント: .claude/commands/check-cinnamon.md

set -e

echo "=== CINNAMON SERVER COMPREHENSIVE CHECK ==="
echo "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
echo

# 1. 基本監視項目の実行
echo "📊 CONTAINER STATUS ANALYSIS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# コンテナ稼働状態と健康チェック
echo "🔍 Container Status (稼働中/停止中の詳細分析):"
CONTAINER_STATUS=$(ssh Cinnamon "docker ps -a --filter 'name=bulk-block-users' --format 'table {{.Names}}\t{{.Status}}\t{{.State}}'")
echo "$CONTAINER_STATUS"
echo

# 稼働中と停止中の分類
RUNNING_CONTAINERS=$(ssh Cinnamon "docker ps --filter 'name=bulk-block-users' --format '{{.Names}}'")
STOPPED_CONTAINERS=$(ssh Cinnamon "docker ps -a --filter 'name=bulk-block-users' --filter 'status=exited' --format '{{.Names}}'")

echo "✅ Running Containers:"
if [ -z "$RUNNING_CONTAINERS" ]; then
    echo "  - None"
else
    echo "$RUNNING_CONTAINERS" | sed 's/^/  - /'
fi

echo "🔴 Stopped Containers:"
if [ -z "$STOPPED_CONTAINERS" ]; then
    echo "  - None"
else
    echo "$STOPPED_CONTAINERS" | sed 's/^/  - /'
fi
echo

# 2. 停止理由の詳細分析（各サービスの停止原因を徹底調査）
echo "🔍 DETAILED CONTAINER STOP ANALYSIS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

if [ -n "$STOPPED_CONTAINERS" ]; then
    for container in $STOPPED_CONTAINERS; do
        SERVICE_NAME=$(echo $container | sed 's/bulk-block-users-//' | sed 's/-1$//')
        echo "📋 Service: $SERVICE_NAME ($container)"
        
        # 終了コード確認
        EXIT_CODE=$(ssh Cinnamon "docker inspect $container --format '{{.State.ExitCode}}'")
        echo "  Exit Code: $EXIT_CODE"
        
        # 停止時刻の取得
        STOP_TIME=$(ssh Cinnamon "docker inspect $container --format '{{.State.FinishedAt}}'" | cut -d'T' -f2 | cut -d'.' -f1)
        echo "  Stopped At: $STOP_TIME JST"
        
        # 最後の20行のログから停止理由を詳細分析
        echo "  🔍 Stop Reason Analysis:"
        FULL_LOGS=$(ssh Cinnamon "docker logs --tail 20 $container" 2>/dev/null)
        
        # 認証エラーパターンの検出
        AUTH_ERROR=$(echo "$FULL_LOGS" | grep -i "認証エラー\|authentication.*failed\|cookie.*無効\|cookie.*invalid" | tail -1)
        if [ -n "$AUTH_ERROR" ]; then
            echo "    • 🔑 認証エラー検出:"
            echo "      - $AUTH_ERROR" | sed 's/^/        /'
        fi
        
        # アカウントロックパターンの検出
        ACCOUNT_LOCK=$(echo "$FULL_LOGS" | grep -i "アカウントロック\|account.*lock\|suspended" | tail -1)
        if [ -n "$ACCOUNT_LOCK" ]; then
            echo "    • 🚫 アカウントロック検出:"
            echo "      - $ACCOUNT_LOCK" | sed 's/^/        /'
        fi
        
        # レート制限エラーの検出
        RATE_LIMIT=$(echo "$FULL_LOGS" | grep -i "rate.*limit\|too many request\|429" | tail -1)
        if [ -n "$RATE_LIMIT" ]; then
            echo "    • ⏰ レート制限エラー検出:"
            echo "      - $RATE_LIMIT" | sed 's/^/        /'
        fi
        
        # API応答エラーの検出
        API_ERROR=$(echo "$FULL_LOGS" | grep -E "Status Code: [45][0-9][0-9]|HTTP.*[45][0-9][0-9]" | tail -1)
        if [ -n "$API_ERROR" ]; then
            echo "    • 🌐 API応答エラー検出:"
            echo "      - $API_ERROR" | sed 's/^/        /'
        fi
        
        # 完了メッセージの検出
        COMPLETION_MSG=$(echo "$FULL_LOGS" | grep -i "処理完了\|完了\|全.*ユーザー.*処理" | tail -1)
        if [ -n "$COMPLETION_MSG" ]; then
            echo "    • ✅ 正常完了メッセージ:"
            echo "      - $COMPLETION_MSG" | sed 's/^/        /'
        fi
        
        # ネットワークエラーの検出
        NETWORK_ERROR=$(echo "$FULL_LOGS" | grep -i "connection.*error\|network.*error\|timeout\|dns" | tail -1)
        if [ -n "$NETWORK_ERROR" ]; then
            echo "    • 🌐 ネットワークエラー検出:"
            echo "      - $NETWORK_ERROR" | sed 's/^/        /'
        fi
        
        # その他の重要なエラーメッセージ
        OTHER_ERROR=$(echo "$FULL_LOGS" | grep -i "error\|エラー\|failed\|失敗" | grep -v "認証エラー\|authentication" | tail -2)
        if [ -n "$OTHER_ERROR" ]; then
            echo "    • ⚠️ その他のエラー:"
            echo "$OTHER_ERROR" | sed 's/^/        - /'
        fi
        
        # 停止理由の総合判定
        echo "  📊 Stop Reason Summary:"
        case $EXIT_CODE in
            0)
                if [ -n "$COMPLETION_MSG" ]; then
                    echo "    ✅ 正常完了 - 全ユーザー処理済み"
                else
                    echo "    ✅ 正常終了 - 処理対象完了"
                fi
                ;;
            1)
                STOP_REASONS=()
                [ -n "$AUTH_ERROR" ] && STOP_REASONS+=("認証エラー")
                [ -n "$ACCOUNT_LOCK" ] && STOP_REASONS+=("アカウントロック")
                [ -n "$RATE_LIMIT" ] && STOP_REASONS+=("レート制限")
                [ -n "$API_ERROR" ] && STOP_REASONS+=("API応答エラー")
                [ -n "$NETWORK_ERROR" ] && STOP_REASONS+=("ネットワークエラー")
                
                if [ ${#STOP_REASONS[@]} -gt 0 ]; then
                    echo "    🔴 エラー終了 - $(IFS=', '; echo "${STOP_REASONS[*]}")"
                else
                    echo "    🔴 エラー終了 - 不明な原因（要詳細調査）"
                fi
                ;;
            *)
                echo "    ⚠️ 異常終了 - Exit Code $EXIT_CODE（要調査）"
                ;;
        esac
        
        # 対応推奨アクション
        echo "  💡 Recommended Actions:"
        if [ "$EXIT_CODE" = "0" ]; then
            echo "    ✅ アクション不要 - 正常完了済み"
        else
            if [ -n "$AUTH_ERROR" ]; then
                echo "    🔑 Cookie更新が必要"
            fi
            if [ -n "$ACCOUNT_LOCK" ]; then
                echo "    ⏳ アカウントロック解除を待機"
            fi
            if [ -n "$RATE_LIMIT" ]; then
                echo "    ⏰ レート制限解除後に再開"
            fi
            if [ -n "$API_ERROR" ] || [ -n "$NETWORK_ERROR" ]; then
                echo "    🔄 システム状態確認後に再起動"
            fi
            if [ -z "$AUTH_ERROR" ] && [ -z "$ACCOUNT_LOCK" ] && [ -z "$RATE_LIMIT" ] && [ -z "$API_ERROR" ] && [ -z "$NETWORK_ERROR" ]; then
                echo "    🔍 詳細ログ調査が必要"
            fi
        fi
        
        echo
    done
else
    echo "  No stopped containers found"
fi

# 3. 実質完了率の正確な計算（永続的失敗を処理済みとして扱う）
echo "📈 COMPLETION RATE ANALYSIS (永続的失敗を処理済みとして扱う)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# 各サービスの統計情報を取得して実質完了率を計算
for container in $STOPPED_CONTAINERS $RUNNING_CONTAINERS; do
    if [ -n "$container" ]; then
        SERVICE_NAME=$(echo $container | sed 's/bulk-block-users-//' | sed 's/-1$//')
        echo "📊 Service: $SERVICE_NAME"
        
        # 処理統計の抽出
        STATS=$(ssh Cinnamon "docker logs $container" | grep -A 10 "=== 処理統計 ===" | tail -10)
        
        if [ -n "$STATS" ]; then
            echo "$STATS" | sed 's/^/  /'
            
            # 完了率の計算と永続的失敗の処理
            TOTAL=$(echo "$STATS" | grep "全対象ユーザー" | grep -o '[0-9,]*人' | tr -d ',人' | head -1)
            BLOCKED=$(echo "$STATS" | grep "ブロック済み" | grep -o '[0-9,]*人' | tr -d ',人' | head -1)
            REMAINING=$(echo "$STATS" | grep "残り未処理" | grep -o '[0-9,]*人' | tr -d ',人' | head -1)
            
            if [ -n "$TOTAL" ] && [ -n "$BLOCKED" ] && [ -n "$REMAINING" ]; then
                # 永続的失敗数の推定（スキップされたユーザー）
                PERMANENT_FAILURES=$(ssh Cinnamon "docker logs $container" | grep "既知の永続的失敗\|suspended\|not_found\|deactivated" | wc -l)
                
                # 実質的な処理済み数（ブロック済み + 永続的失敗）
                PROCESSED=$((BLOCKED + PERMANENT_FAILURES))
                
                # 実質完了率の計算
                if [ "$PROCESSED" -ge "$TOTAL" ]; then
                    ACTUAL_COMPLETION_RATE="100.0"
                    EFFECTIVE_REMAINING=0
                else
                    ACTUAL_COMPLETION_RATE=$(echo "scale=1; $PROCESSED * 100 / $TOTAL" | bc 2>/dev/null || echo "計算不可")
                    EFFECTIVE_REMAINING=$((TOTAL - PROCESSED))
                fi
                
                echo "  📊 Completion Analysis:"
                echo "    - 実質完了率: ${ACTUAL_COMPLETION_RATE}% (処理済み: ${PROCESSED}/${TOTAL})"
                echo "    - ブロック成功: ${BLOCKED}人"
                if [ "$PERMANENT_FAILURES" -gt 0 ]; then
                    echo "    - 永続的失敗: ${PERMANENT_FAILURES}人 (suspended/not_found/deactivated)"
                fi
                echo "    - 実質未処理: ${EFFECTIVE_REMAINING}人"
                
                # 完了状況の判定
                if [ "$ACTUAL_COMPLETION_RATE" = "100.0" ]; then
                    echo "    - 🎉 処理状況: 完全完了（100%）"
                    echo "    - 📋 説明: 全ユーザーが処理済み（ブロック成功 + 技術的にブロック不可能）"
                elif [ "$EFFECTIVE_REMAINING" -gt 0 ]; then
                    echo "    - 🔄 処理状況: 継続中 (${EFFECTIVE_REMAINING}人が未処理)"
                fi
            fi
        else
            echo "  ⚠️ No statistics available"
        fi
        echo
    fi
done

# 4. 認証状態の詳細確認
echo "🔐 AUTHENTICATION STATUS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# 認証エラーの分析（最近5分間）
AUTH_ERRORS=$(ssh Cinnamon "docker logs --since '5m' \$(docker ps -aq --filter 'name=bulk-block-users')" 2>/dev/null | grep -i "認証エラー\|authentication\|cookie.*無効" | wc -l)

if [ "$AUTH_ERRORS" -gt 0 ]; then
    echo "⚠️ Authentication issues detected: $AUTH_ERRORS errors in last 5 minutes"
    echo "🔍 Recent Authentication Errors:"
    ssh Cinnamon "docker logs --since '5m' \$(docker ps -aq --filter 'name=bulk-block-users')" 2>/dev/null | \
        grep -i "認証エラー\|authentication\|cookie.*無効" | \
        tail -3 | sed 's/^/  /'
else
    echo "✅ No recent authentication errors"
fi
echo

# 5. 即座のアクション提示（対応が必要な問題の明確化）
echo "💡 RECOMMENDED ACTIONS (即座のアクション提示)"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

IMMEDIATE_ACTIONS=""
MONITORING_ACTIONS=""

# 認証エラーチェック
if [ "$AUTH_ERRORS" -gt 0 ]; then
    IMMEDIATE_ACTIONS="${IMMEDIATE_ACTIONS}\n  - 🔴 認証エラー対応: Cookie更新が必要"
fi

# Exit Code 1のコンテナチェック
ERROR_CONTAINERS=$(ssh Cinnamon "docker ps -a --filter 'name=bulk-block-users' --filter 'exited=1' --format '{{.Names}}'")
if [ -n "$ERROR_CONTAINERS" ]; then
    IMMEDIATE_ACTIONS="${IMMEDIATE_ACTIONS}\n  - 🔴 エラー停止サービス調査: $(echo $ERROR_CONTAINERS | tr '\n' ' ')"
fi

# 正常完了チェック
COMPLETED_CONTAINERS=$(ssh Cinnamon "docker ps -a --filter 'name=bulk-block-users' --filter 'exited=0' --format '{{.Names}}'")
if [ -n "$COMPLETED_CONTAINERS" ]; then
    MONITORING_ACTIONS="${MONITORING_ACTIONS}\n  - ✅ 正常完了サービス: $(echo $COMPLETED_CONTAINERS | tr '\n' ' ')"
fi

# 継続稼働チェック
if [ -n "$RUNNING_CONTAINERS" ]; then
    MONITORING_ACTIONS="${MONITORING_ACTIONS}\n  - 🔄 継続監視: $(echo $RUNNING_CONTAINERS | tr '\n' ' ')"
fi

# アクション出力
if [ -n "$IMMEDIATE_ACTIONS" ]; then
    echo "🚨 Immediate Actions Required:"
    echo -e "$IMMEDIATE_ACTIONS"
    echo
fi

if [ -n "$MONITORING_ACTIONS" ]; then
    echo "📋 Monitoring Status:"
    echo -e "$MONITORING_ACTIONS"
    echo
fi

# 6. トラブルシューティング（具体的な解決手順の提示）
echo "📊 SUMMARY"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

TOTAL_CONTAINERS=$(echo "$RUNNING_CONTAINERS $STOPPED_CONTAINERS" | wc -w)
RUNNING_COUNT=$(echo "$RUNNING_CONTAINERS" | wc -w)
STOPPED_COUNT=$(echo "$STOPPED_CONTAINERS" | wc -w)

echo "📈 Container Status Summary:"
echo "  - Total Services: $TOTAL_CONTAINERS"
echo "  - Running: $RUNNING_COUNT"
echo "  - Stopped: $STOPPED_COUNT"

if [ "$AUTH_ERRORS" -gt 0 ] || [ -n "$ERROR_CONTAINERS" ]; then
    echo "🚨 Overall Status: ATTENTION_REQUIRED"
    echo "  - 認証エラーまたはサービス停止が検出されました"
else
    echo "✅ Overall Status: HEALTHY"
    echo "  - システムは正常に動作中または正常完了済みです"
fi

# 7. パフォーマンス分析
echo "⚡ PERFORMANCE ANALYSIS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# 処理速度の分析
echo "📈 Processing Speed Analysis:"
TOTAL_BLOCKED=0
TOTAL_TARGETS=0
for container in $STOPPED_CONTAINERS $RUNNING_CONTAINERS; do
    if [ -n "$container" ]; then
        SERVICE_NAME=$(echo $container | sed 's/bulk-block-users-//' | sed 's/-1$//')
        BLOCKED=$(ssh Cinnamon "docker logs $container" | grep "ブロック済み" | tail -1 | grep -o '[0-9,]*人' | tr -d ',人' | head -1)
        TARGETS=$(ssh Cinnamon "docker logs $container" | grep "全対象ユーザー" | tail -1 | grep -o '[0-9,]*人' | tr -d ',人' | head -1)
        
        if [ -n "$BLOCKED" ] && [ -n "$TARGETS" ]; then
            TOTAL_BLOCKED=$((TOTAL_BLOCKED + BLOCKED))
            TOTAL_TARGETS=$((TOTAL_TARGETS + TARGETS))
            COMPLETION_RATE=$(echo "scale=1; $BLOCKED * 100 / $TARGETS" | bc 2>/dev/null || echo "0")
            echo "  - $SERVICE_NAME: $BLOCKED/$TARGETS (${COMPLETION_RATE}%)"
        fi
    fi
done

if [ "$TOTAL_TARGETS" -gt 0 ]; then
    OVERALL_COMPLETION=$(echo "scale=1; $TOTAL_BLOCKED * 100 / $TOTAL_TARGETS" | bc 2>/dev/null || echo "0")
    echo "  - 全体進捗: $TOTAL_BLOCKED/$TOTAL_TARGETS (${OVERALL_COMPLETION}%)"
fi

# 8. エラー分析とパターン特定
echo
echo "🔍 ERROR PATTERN ANALYSIS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# 認証エラーパターンの詳細分析
echo "🔐 Authentication Error Patterns:"
AUTH_PATTERN_ANALYSIS=$(ssh Cinnamon "docker logs --since '1h' \$(docker ps -aq --filter 'name=bulk-block-users')" 2>/dev/null | grep -i "認証エラー\|authentication\|cookie" | head -10)
if [ -n "$AUTH_PATTERN_ANALYSIS" ]; then
    echo "$AUTH_PATTERN_ANALYSIS" | sed 's/^/  /'
else
    echo "  - No recent authentication errors in last hour"
fi

# APIエラーパターンの分析
echo "🌐 API Error Patterns:"
API_ERRORS=$(ssh Cinnamon "docker logs --since '30m' \$(docker ps -aq --filter 'name=bulk-block-users')" 2>/dev/null | grep -E "Status Code: [45][0-9][0-9]|エラー|失敗" | tail -5)
if [ -n "$API_ERRORS" ]; then
    echo "$API_ERRORS" | sed 's/^/  /'
else
    echo "  - No recent API errors in last 30 minutes"
fi

# 9. リソース使用状況
echo
echo "💾 RESOURCE UTILIZATION"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Cinnamonサーバーのリソース状況
echo "🖥️ Server Resource Status:"
SERVER_STATS=$(ssh Cinnamon "uptime && free -h && df -h /" 2>/dev/null)
if [ -n "$SERVER_STATS" ]; then
    echo "$SERVER_STATS" | sed 's/^/  /'
else
    echo "  - Unable to retrieve server statistics"
fi

# 10. 時系列分析
echo
echo "📊 TIME-SERIES ANALYSIS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

echo "⏰ Processing Timeline (last 2 hours):"
# 過去2時間の処理ログから進捗を抽出
for container in $STOPPED_CONTAINERS $RUNNING_CONTAINERS; do
    if [ -n "$container" ]; then
        SERVICE_NAME=$(echo $container | sed 's/bulk-block-users-//' | sed 's/-1$//')
        TIMELINE=$(ssh Cinnamon "docker logs --since '2h' $container" 2>/dev/null | grep -E "進捗|完了|ブロック済み" | tail -3)
        if [ -n "$TIMELINE" ]; then
            echo "  📈 $SERVICE_NAME:"
            echo "$TIMELINE" | sed 's/^/    /'
        fi
    fi
done

# 11. 予測分析
echo
echo "🔮 PREDICTIVE ANALYSIS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

echo "📈 Completion Predictions:"
for container in $RUNNING_CONTAINERS; do
    if [ -n "$container" ]; then
        SERVICE_NAME=$(echo $container | sed 's/bulk-block-users-//' | sed 's/-1$//')
        
        # 残り未処理ユーザー数を取得
        REMAINING=$(ssh Cinnamon "docker logs $container" | grep "残り未処理" | tail -1 | grep -o '[0-9,]*人' | tr -d ',人')
        
        if [ -n "$REMAINING" ] && [ "$REMAINING" -gt 0 ]; then
            # 簡単な処理速度推定（10分で50ユーザー処理と仮定）
            ESTIMATED_HOURS=$(echo "scale=1; $REMAINING / 300" | bc 2>/dev/null || echo "不明")
            echo "  - $SERVICE_NAME: 残り${REMAINING}人 → 推定完了まで約${ESTIMATED_HOURS}時間"
        else
            echo "  - $SERVICE_NAME: 処理完了済み"
        fi
    fi
done

# 12. 健康度スコア算出
echo
echo "🏥 SYSTEM HEALTH SCORE"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

HEALTH_SCORE=100
HEALTH_ISSUES=""

# 認証エラーによる減点
if [ "$AUTH_ERRORS" -gt 0 ]; then
    HEALTH_SCORE=$((HEALTH_SCORE - 20))
    HEALTH_ISSUES="${HEALTH_ISSUES}\n  - 認証エラーあり (-20点)"
fi

# エラー停止コンテナによる減点
ERROR_COUNT=$(echo "$ERROR_CONTAINERS" | wc -w)
if [ "$ERROR_COUNT" -gt 0 ]; then
    HEALTH_SCORE=$((HEALTH_SCORE - ERROR_COUNT * 15))
    HEALTH_ISSUES="${HEALTH_ISSUES}\n  - エラー停止サービス: ${ERROR_COUNT}個 (-$((ERROR_COUNT * 15))点)"
fi

# 進捗率による評価
if [ "$TOTAL_TARGETS" -gt 0 ]; then
    OVERALL_COMPLETION_INT=$(echo "$OVERALL_COMPLETION" | cut -d. -f1)
    if [ "$OVERALL_COMPLETION_INT" -lt 50 ]; then
        HEALTH_SCORE=$((HEALTH_SCORE - 10))
        HEALTH_ISSUES="${HEALTH_ISSUES}\n  - 全体進捗率低下 (-10点)"
    fi
fi

echo "🎯 Overall Health Score: ${HEALTH_SCORE}/100"
if [ -n "$HEALTH_ISSUES" ]; then
    echo "📋 Health Issues:"
    echo -e "$HEALTH_ISSUES"
fi

# 健康度に基づく総合判定
if [ "$HEALTH_SCORE" -ge 80 ]; then
    echo "✅ System Status: EXCELLENT"
elif [ "$HEALTH_SCORE" -ge 60 ]; then
    echo "⚠️ System Status: GOOD (要監視)"
elif [ "$HEALTH_SCORE" -ge 40 ]; then
    echo "🔶 System Status: FAIR (要注意)"
else
    echo "🚨 System Status: POOR (要対応)"
fi

# 13. 最適化提案
echo
echo "💡 OPTIMIZATION RECOMMENDATIONS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

echo "🔧 Specific Recommendations:"

# エラー停止サービスへの対応提案
if [ -n "$ERROR_CONTAINERS" ]; then
    echo "  1. 🔴 Immediate Actions for Error Containers:"
    for error_container in $ERROR_CONTAINERS; do
        SERVICE_NAME=$(echo $error_container | sed 's/bulk-block-users-//' | sed 's/-1$//')
        echo "     - $SERVICE_NAME: Cookie更新とサービス再起動を推奨"
    done
fi

# パフォーマンス改善提案
if [ "$TOTAL_TARGETS" -gt 0 ] && [ "$OVERALL_COMPLETION_INT" -lt 80 ]; then
    echo "  2. ⚡ Performance Improvements:"
    echo "     - 並列処理数の増加を検討"
    echo "     - バッチサイズの最適化"
    echo "     - レート制限の調整"
fi

# 監視強化の提案
echo "  3. 📊 Enhanced Monitoring:"
echo "     - 定期的なCookie有効性チェック"
echo "     - 自動フェイルオーバー機能の実装"
echo "     - アラート閾値の設定"

echo
echo "=== COMPREHENSIVE CHECK COMPLETE ==="
echo "Next check recommended: $(date -d '+5 minutes' '+%H:%M')"
echo "Health Score: ${HEALTH_SCORE}/100"
echo
echo "📋 For detailed technical analysis, run:"
echo "  .claude/cinnamon-logs-ai-optimized.sh"