#!/bin/bash

# check-cinnamon-optimized - 高速化されたCinnamonサーバー包括監視
# 目標実行時間: 15秒未満（従来の74秒から大幅短縮）
# 最適化: SSH接続数を1回に集約、重複処理排除、軽量化

set -e

SCRIPT_START_TIME=$(date +%s)
DETAILED_REPORT_FILE="/tmp/cinnamon-analysis-$(date +%Y%m%d_%H%M%S).json"

echo "=== CINNAMON SERVER OPTIMIZED CHECK ==="
echo "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
echo "⚡ 高速化モード: SSH接続数を大幅削減"
echo

# 1つのSSH接続で全情報を取得（劇的な高速化）
echo "🚀 データ収集中..."
SSH_DATA=$(ssh Cinnamon '
# 現在時刻（JST）
CURRENT_TIME=$(date +%s)
echo "CURRENT_TIME:$CURRENT_TIME"

# コンテナ情報を一括取得
CONTAINER_INFO=$(docker ps -a --filter "name=bulk-block-users" --format "{{.Names}}\t{{.Status}}\t{{.State}}\t{{.Image}}\t{{.CreatedAt}}")
echo "CONTAINER_INFO_START"
echo "$CONTAINER_INFO"
echo "CONTAINER_INFO_END"

# 稼働中コンテナの詳細情報
RUNNING_CONTAINERS=$(docker ps --filter "name=bulk-block-users" --format "{{.Names}}")
echo "RUNNING_CONTAINERS_START"
echo "$RUNNING_CONTAINERS"
echo "RUNNING_CONTAINERS_END"

# 停止中コンテナの詳細情報
STOPPED_CONTAINERS=$(docker ps -a --filter "name=bulk-block-users" --filter "status=exited" --format "{{.Names}}")
echo "STOPPED_CONTAINERS_START"
echo "$STOPPED_CONTAINERS"
echo "STOPPED_CONTAINERS_END"

# 全コンテナの詳細情報を一括取得（最大の高速化）
if [ -n "$CONTAINER_INFO" ]; then
    echo "CONTAINER_DETAILS_START"
    echo "$CONTAINER_INFO" | while read -r line; do
        CONTAINER_NAME=$(echo "$line" | cut -f1)
        if [ -n "$CONTAINER_NAME" ]; then
            # 一度に全情報を取得
            DETAIL_INFO=$(docker inspect "$CONTAINER_NAME" --format "{{.Name}}\t{{.State.ExitCode}}\t{{.State.StartedAt}}\t{{.State.FinishedAt}}\t{{.State.Status}}")
            echo "DETAIL:$DETAIL_INFO"
            
            # ログも一括取得（最新30行のみ）
            LOGS=$(docker logs --tail 30 "$CONTAINER_NAME" 2>/dev/null | grep -E "(認証エラー|authentication.*failed|cookie.*無効|処理完了|進捗:|ブロック|エラー|ERROR|WARNING)" | tail -10)
            if [ -n "$LOGS" ]; then
                echo "LOGS_START:$CONTAINER_NAME"
                echo "$LOGS"
                echo "LOGS_END:$CONTAINER_NAME"
            fi
        fi
    done
    echo "CONTAINER_DETAILS_END"
fi

# システムリソース情報を一括取得
echo "SYSTEM_INFO_START"
# CPU使用率
CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk "{print \$2}" | cut -d"%" -f1)
echo "CPU:$CPU_USAGE"

# メモリ使用状況
MEM_INFO=$(free -m | grep "Mem:")
echo "MEMORY:$MEM_INFO"

# ディスク使用状況
DISK_INFO=$(df -h / | tail -1)
echo "DISK:$DISK_INFO"

# Docker統計情報
DOCKER_STATS=$(docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}")
echo "DOCKER_STATS_START"
echo "$DOCKER_STATS"
echo "DOCKER_STATS_END"
echo "SYSTEM_INFO_END"
')

# データ解析（高速化）
echo "🔍 データ解析中..."

# SSH結果の解析
CURRENT_TIME=$(echo "$SSH_DATA" | grep "CURRENT_TIME:" | cut -d: -f2)
CONTAINER_INFO=$(echo "$SSH_DATA" | sed -n '/CONTAINER_INFO_START/,/CONTAINER_INFO_END/p' | grep -v "CONTAINER_INFO_")
RUNNING_CONTAINERS=$(echo "$SSH_DATA" | sed -n '/RUNNING_CONTAINERS_START/,/RUNNING_CONTAINERS_END/p' | grep -v "RUNNING_CONTAINERS_")
STOPPED_CONTAINERS=$(echo "$SSH_DATA" | sed -n '/STOPPED_CONTAINERS_START/,/STOPPED_CONTAINERS_END/p' | grep -v "STOPPED_CONTAINERS_")

# コンテナ状態の分析
echo "📊 CONTAINER STATUS ANALYSIS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

if [ -n "$CONTAINER_INFO" ]; then
    echo "$CONTAINER_INFO" | while IFS=$'\t' read -r name status state image created; do
        echo "🔧 $name: $status"
    done
    echo
fi

RUNNING_COUNT=$(echo "$RUNNING_CONTAINERS" | grep -c . 2>/dev/null || echo "0")
STOPPED_COUNT=$(echo "$STOPPED_CONTAINERS" | grep -c . 2>/dev/null || echo "0")

echo "✅ Running: $RUNNING_COUNT containers"
echo "🔴 Stopped: $STOPPED_COUNT containers"
echo

# 停止コンテナの詳細分析（高速化版）
if [ -n "$STOPPED_CONTAINERS" ]; then
    echo "🔍 STOPPED CONTAINERS ANALYSIS"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # 詳細情報を解析
    while IFS=$'\t' read -r detail_line; do
        if [[ "$detail_line" == DETAIL:* ]]; then
            DETAIL_DATA=$(echo "$detail_line" | cut -d: -f2-)
            CONTAINER_NAME=$(echo "$DETAIL_DATA" | cut -f1 | sed 's/^\///')
            EXIT_CODE=$(echo "$DETAIL_DATA" | cut -f2)
            FINISHED_AT=$(echo "$DETAIL_DATA" | cut -f4 | cut -d'T' -f2 | cut -d'.' -f1)
            
            if echo "$STOPPED_CONTAINERS" | grep -q "$CONTAINER_NAME"; then
                SERVICE_NAME=$(echo "$CONTAINER_NAME" | sed 's/bulk-block-users-//' | sed 's/-1$//')
                echo "📋 Service: $SERVICE_NAME"
                echo "  Exit Code: $EXIT_CODE"
                echo "  Stopped At: $FINISHED_AT JST"
                
                # ログ分析（事前に取得済み）
                CONTAINER_LOGS=$(echo "$SSH_DATA" | sed -n "/LOGS_START:$CONTAINER_NAME/,/LOGS_END:$CONTAINER_NAME/p" | grep -v "LOGS_")
                
                if [ -n "$CONTAINER_LOGS" ]; then
                    # エラーパターンの検出（高速化）
                    if echo "$CONTAINER_LOGS" | grep -qi "認証エラー\|authentication.*failed\|cookie.*無効"; then
                        echo "  🔑 認証エラー検出"
                    elif echo "$CONTAINER_LOGS" | grep -qi "アカウントロック\|suspended"; then
                        echo "  🚫 アカウントロック検出"
                    elif echo "$CONTAINER_LOGS" | grep -qi "rate.*limit\|429"; then
                        echo "  ⏰ レート制限エラー検出"
                    elif echo "$CONTAINER_LOGS" | grep -qi "処理完了"; then
                        echo "  ✅ 正常完了"
                    else
                        echo "  ❓ 詳細ログ確認が必要"
                    fi
                fi
                echo
            fi
        fi
    done <<< "$(echo "$SSH_DATA" | sed -n '/CONTAINER_DETAILS_START/,/CONTAINER_DETAILS_END/p')"
fi

# 稼働中コンテナの効率分析（軽量化版）
if [ -n "$RUNNING_CONTAINERS" ]; then
    echo "🚀 RUNNING CONTAINERS PERFORMANCE"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    echo "$RUNNING_CONTAINERS" | while read -r container; do
        if [ -n "$container" ]; then
            SERVICE_NAME=$(echo "$container" | sed 's/bulk-block-users-//' | sed 's/-1$//')
            
            # ログから進捗情報を抽出
            CONTAINER_LOGS=$(echo "$SSH_DATA" | sed -n "/LOGS_START:$container/,/LOGS_END:$container/p" | grep -v "LOGS_")
            
            if [ -n "$CONTAINER_LOGS" ]; then
                # 進捗データの抽出
                PROGRESS_DATA=$(echo "$CONTAINER_LOGS" | grep -E "進捗:|ブロック" | tail -1)
                
                if [ -n "$PROGRESS_DATA" ]; then
                    echo "📊 Service: $SERVICE_NAME"
                    echo "  📈 最新進捗: $PROGRESS_DATA"
                    
                    # 簡易効率評価
                    if echo "$PROGRESS_DATA" | grep -q "50.*件/時間"; then
                        echo "  💡 効率: 🟢 優秀"
                    elif echo "$PROGRESS_DATA" | grep -q "30.*件/時間"; then
                        echo "  💡 効率: 🟡 良好"
                    else
                        echo "  💡 効率: 🔴 要調査"
                    fi
                    echo
                fi
            fi
        fi
    done
fi

# システムリソース状況（軽量化版）
echo "💻 SYSTEM RESOURCES"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# システム情報の解析
SYSTEM_INFO=$(echo "$SSH_DATA" | sed -n '/SYSTEM_INFO_START/,/SYSTEM_INFO_END/p')

CPU_USAGE=$(echo "$SYSTEM_INFO" | grep "CPU:" | cut -d: -f2)
MEM_INFO=$(echo "$SYSTEM_INFO" | grep "MEMORY:" | cut -d: -f2-)
DISK_INFO=$(echo "$SYSTEM_INFO" | grep "DISK:" | cut -d: -f2-)

echo "🖥️  CPU使用率: ${CPU_USAGE}%"

if [ -n "$MEM_INFO" ]; then
    MEM_USED=$(echo "$MEM_INFO" | awk '{print $3}')
    MEM_TOTAL=$(echo "$MEM_INFO" | awk '{print $2}')
    MEM_PERCENT=$(echo "scale=1; $MEM_USED * 100 / $MEM_TOTAL" | bc 2>/dev/null || echo "0")
    echo "💾 メモリ使用率: ${MEM_PERCENT}% (${MEM_USED}MB/${MEM_TOTAL}MB)"
fi

if [ -n "$DISK_INFO" ]; then
    DISK_USAGE=$(echo "$DISK_INFO" | awk '{print $5}')
    echo "💿 ディスク使用率: $DISK_USAGE"
fi

echo

# 重要なアラートのみ表示（簡潔化）
echo "🚨 CRITICAL ALERTS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

ALERTS_FOUND=0

# 認証エラーの検出
if echo "$SSH_DATA" | grep -qi "認証エラー\|authentication.*failed"; then
    echo "🔑 認証エラーが検出されました - Cookie更新が必要"
    ALERTS_FOUND=$((ALERTS_FOUND + 1))
fi

# 高いリソース使用率の警告
if [ -n "$CPU_USAGE" ] && [ "$CPU_USAGE" != "0" ] && command -v bc >/dev/null 2>&1; then
    if [ "$(echo "$CPU_USAGE > 80" | bc 2>/dev/null)" -eq 1 ]; then
        echo "💻 CPU使用率が高値です (${CPU_USAGE}%)"
        ALERTS_FOUND=$((ALERTS_FOUND + 1))
    fi
fi

# 大量のエラーコンテナ
ERROR_CONTAINERS=$(echo "$SSH_DATA" | grep -c "Exit Code: [1-9]" 2>/dev/null || echo "0")
if [ -n "$ERROR_CONTAINERS" ] && [ "$ERROR_CONTAINERS" -gt 2 ]; then
    echo "🔴 エラー終了コンテナが多数存在します (${ERROR_CONTAINERS}個)"
    ALERTS_FOUND=$((ALERTS_FOUND + 1))
fi

if [ "$ALERTS_FOUND" -eq 0 ]; then
    echo "✅ 重要なアラートはありません"
fi

echo

# 簡潔な推奨アクション
echo "🎯 RECOMMENDED ACTIONS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

if [ "$ALERTS_FOUND" -gt 0 ]; then
    echo "⚡ 即座の対応:"
    if echo "$SSH_DATA" | grep -qi "認証エラー"; then
        echo "  1. Cookie更新を実行"
    fi
    if [ "$ERROR_CONTAINERS" -gt 2 ]; then
        echo "  2. エラーコンテナの調査・再起動"
    fi
    echo
fi

echo "📋 定期メンテナンス:"
echo "  • 次回チェック: 30分後"
echo "  • 詳細分析: 必要に応じて .claude/cinnamon-logs-ai-optimized.sh"
echo "  • 統合監視: .claude/cinnamon-monitor-suite.sh"

# 軽量化されたJSONレポート生成
cat > "$DETAILED_REPORT_FILE" << EOF
{
  "timestamp": "$(date '+%Y-%m-%d %H:%M:%S')",
  "execution_time_seconds": $(($(date +%s) - SCRIPT_START_TIME)),
  "containers": {
    "running": $RUNNING_COUNT,
    "stopped": $STOPPED_COUNT,
    "total": $((RUNNING_COUNT + STOPPED_COUNT))
  },
  "system": {
    "cpu_usage_percent": "${CPU_USAGE:-0}",
    "memory_usage_percent": "${MEM_PERCENT:-0}",
    "disk_usage": "${DISK_USAGE:-unknown}"
  },
  "alerts": {
    "critical_count": $ALERTS_FOUND,
    "auth_errors": $(echo "$SSH_DATA" | grep -c "認証エラー" 2>/dev/null || echo "0"),
    "error_containers": $ERROR_CONTAINERS
  },
  "performance": {
    "optimization_applied": true,
    "ssh_connections": 1,
    "target_time_seconds": 15
  }
}
EOF

echo
echo "📊 EXECUTION SUMMARY"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

EXECUTION_TIME=$(($(date +%s) - SCRIPT_START_TIME))
echo "⚡ 実行時間: ${EXECUTION_TIME}秒"
echo "🎯 目標時間: 15秒未満"

if [ "$EXECUTION_TIME" -lt 15 ]; then
    echo "✅ 性能目標達成! ($(echo "scale=1; 74 / $EXECUTION_TIME" | bc 2>/dev/null)倍高速化)"
else
    echo "⚠️  目標時間を超過 - さらなる最適化が必要"
fi

echo "📊 SSH接続数: 1回 (従来の62回から大幅削減)"
echo "📄 レポート: $DETAILED_REPORT_FILE"
echo

echo "🚀 OPTIMIZATION COMPLETE"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ 監視完了 - 効率化された高速監視システム"
echo "📈 改善状況: 実行時間を大幅短縮、機能は維持"
echo "🔄 次回実行: 必要に応じて同じコマンドを使用"