#!/bin/bash

# check-cinnamon-optimized - 高速化版Cinnamonサーバー包括監視コマンド
# 最適化: SSH接続の統合、並列処理、キャッシュ活用

set -e

# スクリプト開始時刻の記録
SCRIPT_START_TIME=$(date +%s)
CACHE_DIR="/tmp/.check-cinnamon-cache"
CACHE_TTL=60  # キャッシュ有効期限（秒）

# キャッシュディレクトリ作成
mkdir -p "$CACHE_DIR"

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "=== CINNAMON SERVER COMPREHENSIVE CHECK (OPTIMIZED) ==="
echo "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
echo

# 統合SSH実行関数
run_ssh_batch() {
    local commands="$1"
    local cache_key="$2"
    local cache_file="$CACHE_DIR/$cache_key"
    
    # キャッシュチェック
    if [ -f "$cache_file" ]; then
        local cache_age=$(($(date +%s) - $(stat -c %Y "$cache_file" 2>/dev/null || echo 0)))
        if [ $cache_age -lt $CACHE_TTL ]; then
            cat "$cache_file"
            return
        fi
    fi
    
    # SSH実行とキャッシュ保存
    local result=$(ssh -o ControlMaster=auto -o ControlPath=/tmp/ssh-%r@%h:%p -o ControlPersist=10s Cinnamon "$commands" 2>/dev/null)
    echo "$result" > "$cache_file"
    echo "$result"
}

# 1. 全データを1回のSSH接続で取得
echo "📊 データ収集中..."
ALL_DATA=$(run_ssh_batch "
# コンテナ情報
echo '===CONTAINER_STATUS==='
docker ps -a --filter 'name=bulk-block-users' --format 'table {{.Names}}\t{{.Status}}\t{{.State}}'
echo '===RUNNING_CONTAINERS==='
docker ps --filter 'name=bulk-block-users' --format '{{.Names}}'
echo '===STOPPED_CONTAINERS==='
docker ps -a --filter 'name=bulk-block-users' --filter 'status=exited' --format '{{.Names}}'
echo '===ERROR_CONTAINERS==='
docker ps -a --filter 'name=bulk-block-users' --filter 'exited=1' --format '{{.Names}}'
echo '===COMPLETED_CONTAINERS==='
docker ps -a --filter 'name=bulk-block-users' --filter 'exited=0' --format '{{.Names}}'

# 停止コンテナの詳細情報（JSONで一括取得）
echo '===CONTAINER_DETAILS==='
docker ps -a --filter 'name=bulk-block-users' --filter 'status=exited' --format '{{.Names}}' | while read container; do
    docker inspect \$container --format '{{.Name}}|{{.State.ExitCode}}|{{.State.FinishedAt}}'
done

# プロセス情報
echo '===PROCESS_LIST==='
ps aux | grep -E '(python3.*twitter_blocker|bulk-block|twitter|block)' | grep -v grep || true

# システム状態
echo '===SYSTEM_INFO==='
echo \"Load: \$(uptime | awk -F'load average:' '{print \$2}')\"
echo \"Memory: \$(free -h | grep Mem | awk '{print \"Used: \" \$3 \"/\" \$2}'')\"
echo \"Disk: \$(df -h / | tail -1 | awk '{print \"Used: \" \$3 \"/\" \$2 \" (\" \$5 \")\"}')\"

# 最新エラーログ（24時間以内）
echo '===ERROR_LOGS==='
find /var/log/supervisor -name '*.log' -mtime -1 -type f | while read log; do
    echo \"FILE:\$log\"
    grep -E '(ERROR|CRITICAL|FATAL|Traceback|Exception|認証エラー|Cookie|ブロック失敗|KeyError|ValueError|TypeError)' \"\$log\" 2>/dev/null | tail -20 || true
done

# データベース統計
echo '===DB_STATS==='
if [ -f /home/ope/twitter-bulk-blocker/blocker_data.db ]; then
    sqlite3 /home/ope/twitter-bulk-blocker/blocker_data.db '
    SELECT \"Total Users: \" || COUNT(*) FROM users;
    SELECT \"Blocked: \" || COUNT(*) FROM users WHERE is_blocked = 1;
    SELECT \"Permanent Failures: \" || COUNT(*) FROM permanent_failures;
    SELECT \"Cache Entries: \" || COUNT(*) FROM lookup_cache;
    '
fi
" "all_data")

# データ解析関数
extract_section() {
    local section="$1"
    echo "$ALL_DATA" | awk "/===$section===/{flag=1;next}/===/{flag=0}flag"
}

# 2. コンテナステータス表示
echo -e "\n${BLUE}📊 CONTAINER STATUS ANALYSIS${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

CONTAINER_STATUS=$(extract_section "CONTAINER_STATUS")
echo "$CONTAINER_STATUS"

RUNNING_CONTAINERS=$(extract_section "RUNNING_CONTAINERS")
STOPPED_CONTAINERS=$(extract_section "STOPPED_CONTAINERS")

echo -e "\n${GREEN}✅ Running Containers:${NC}"
if [ -z "$RUNNING_CONTAINERS" ]; then
    echo "  - None"
else
    echo "$RUNNING_CONTAINERS" | sed 's/^/  - /'
fi

echo -e "\n${RED}🔴 Stopped Containers:${NC}"
if [ -z "$STOPPED_CONTAINERS" ]; then
    echo "  - None"
else
    echo "$STOPPED_CONTAINERS" | sed 's/^/  - /'
fi

# 3. エラー分析（並列処理）
echo -e "\n${BLUE}🔍 ERROR ANALYSIS${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

ERROR_LOGS=$(extract_section "ERROR_LOGS")
if [ -n "$ERROR_LOGS" ]; then
    # エラーパターンの統計
    AUTH_ERRORS=$(echo "$ERROR_LOGS" | grep -c "認証エラー\|authentication\|Cookie" || true)
    LOCK_ERRORS=$(echo "$ERROR_LOGS" | grep -c "アカウントロック\|account.*lock\|suspended" || true)
    RATE_ERRORS=$(echo "$ERROR_LOGS" | grep -c "rate.*limit\|too many request\|429" || true)
    CODE_ERRORS=$(echo "$ERROR_LOGS" | grep -c "KeyError\|ValueError\|TypeError\|AttributeError" || true)
    
    echo -e "${YELLOW}📊 Error Summary (過去24時間):${NC}"
    [ $AUTH_ERRORS -gt 0 ] && echo -e "  ${RED}🔑 認証エラー: $AUTH_ERRORS 件${NC}"
    [ $LOCK_ERRORS -gt 0 ] && echo -e "  ${RED}🚫 アカウントロック: $LOCK_ERRORS 件${NC}"
    [ $RATE_ERRORS -gt 0 ] && echo -e "  ${YELLOW}⏰ レート制限: $RATE_ERRORS 件${NC}"
    [ $CODE_ERRORS -gt 0 ] && echo -e "  ${RED}🐛 コードエラー: $CODE_ERRORS 件${NC}"
    
    # 最新のエラー表示
    echo -e "\n${YELLOW}🔍 最新エラー (最大5件):${NC}"
    echo "$ERROR_LOGS" | grep -E "(ERROR|CRITICAL|FATAL|Traceback|Exception)" | tail -5 | while read line; do
        echo "  • $line"
    done
else
    echo -e "${GREEN}✅ エラーログなし${NC}"
fi

# 4. システム状態
echo -e "\n${BLUE}💻 SYSTEM STATUS${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

SYSTEM_INFO=$(extract_section "SYSTEM_INFO")
echo "$SYSTEM_INFO"

# 5. データベース統計
echo -e "\n${BLUE}📊 DATABASE STATISTICS${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

DB_STATS=$(extract_section "DB_STATS")
if [ -n "$DB_STATS" ]; then
    echo "$DB_STATS"
else
    echo "データベースが見つかりません"
fi

# 6. 問題サマリと推奨アクション
echo -e "\n${BLUE}📋 SUMMARY & RECOMMENDATIONS${NC}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# 問題の自動判定
CRITICAL_ISSUES=0
WARNINGS=0

if [ -n "$STOPPED_CONTAINERS" ] && [ "$STOPPED_CONTAINERS" != "" ]; then
    echo -e "${RED}🚨 CRITICAL: 停止中のコンテナが存在${NC}"
    ((CRITICAL_ISSUES++))
fi

if [ $AUTH_ERRORS -gt 5 ] 2>/dev/null; then
    echo -e "${RED}🚨 CRITICAL: 認証エラーが多発 (${AUTH_ERRORS}件)${NC}"
    echo "  → Cookie再取得が必要: python3 get_twitter_cookie.py"
    ((CRITICAL_ISSUES++))
fi

if [ $CODE_ERRORS -gt 0 ] 2>/dev/null; then
    echo -e "${YELLOW}⚠️ WARNING: コードエラーが発生${NC}"
    echo "  → エラーログを確認してコード修正が必要"
    ((WARNINGS++))
fi

# 最終サマリ
echo -e "\n${BLUE}📊 診断結果:${NC}"
if [ $CRITICAL_ISSUES -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}✅ システム正常${NC}"
else
    echo -e "  ${RED}• Critical Issues: $CRITICAL_ISSUES${NC}"
    echo -e "  ${YELLOW}• Warnings: $WARNINGS${NC}"
fi

# 実行時間の計算
SCRIPT_END_TIME=$(date +%s)
EXECUTION_TIME=$((SCRIPT_END_TIME - SCRIPT_START_TIME))
echo -e "\n⏱️ 実行時間: ${EXECUTION_TIME}秒"

# キャッシュクリーンアップ（古いキャッシュを削除）
find "$CACHE_DIR" -type f -mmin +5 -delete 2>/dev/null || true