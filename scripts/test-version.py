#!/usr/bin/env python3
"""
„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÅÆ„ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà

„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ‰ª•‰∏ã„Çí„ÉÜ„Çπ„Éà„Åó„Åæ„Åô:
- ÈùôÁöÑ„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆÂèñÂæó
- GitÊÉÖÂ†±„ÅÆÂèñÂæó
- DockerÁí∞Â¢ÉÂ§âÊï∞„ÅÆË™çË≠ò
- GitHub ActionsÁí∞Â¢ÉÂ§âÊï∞„ÅÆË™çË≠ò
- ÂÆüÂäπ„Éê„Éº„Ç∏„Éß„É≥„ÅÆÂÑ™ÂÖàÈ†Ü‰Ωç
"""

import os
import sys

# „Éë„Çπ„ÇíËøΩÂä†„Åó„Å¶twitter_blocker„Çí„Ç§„É≥„Éù„Éº„ÉàÂèØËÉΩ„Å´„Åô„Çã
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

try:
    import twitter_blocker.version as version_module
except ImportError as e:
    print(f"‚ùå Failed to import version module: {e}")
    sys.exit(1)


def test_basic_version_info():
    """Âü∫Êú¨„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆ„ÉÜ„Çπ„Éà"""
    print("=== Âü∫Êú¨„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÉÜ„Çπ„Éà ===")
    
    try:
        # ÈùôÁöÑ„Éê„Éº„Ç∏„Éß„É≥
        static_version = version_module.__version__
        print(f"‚úÖ Static version: {static_version}")
        
        # Âü∫Êú¨„Éê„Éº„Ç∏„Éß„É≥ÊñáÂ≠óÂàó
        version_string = version_module.get_version_string()
        print(f"‚úÖ Basic version string: {version_string}")
        
        # Ë©≥Á¥∞„Éê„Éº„Ç∏„Éß„É≥ÊñáÂ≠óÂàó
        detailed_string = version_module.get_version_string(detailed=True)
        print(f"‚úÖ Detailed version string: {detailed_string}")
        
        return True
    except Exception as e:
        print(f"‚ùå Basic version test failed: {e}")
        return False


def test_git_info():
    """GitÊÉÖÂ†±„ÅÆ„ÉÜ„Çπ„Éà"""
    print("\n=== GitÊÉÖÂ†±„ÉÜ„Çπ„Éà ===")
    
    try:
        git_info = version_module.get_git_info()
        print(f"‚úÖ Git info retrieved: {len(git_info)} fields")
        
        for key, value in git_info.items():
            if value:
                print(f"  - {key}: {value}")
            else:
                print(f"  - {key}: (not available)")
        
        return True
    except Exception as e:
        print(f"‚ùå Git info test failed: {e}")
        return False


def test_docker_info():
    """DockerÁí∞Â¢ÉÊÉÖÂ†±„ÅÆ„ÉÜ„Çπ„Éà"""
    print("\n=== DockerÁí∞Â¢ÉÊÉÖÂ†±„ÉÜ„Çπ„Éà ===")
    
    try:
        docker_info = version_module.get_docker_info()
        print(f"‚úÖ Docker info retrieved: {len(docker_info)} fields")
        
        has_docker_env = any(v and v != "unknown" for v in docker_info.values())
        if has_docker_env:
            print("üê≥ Docker environment detected:")
            for key, value in docker_info.items():
                if value and value != "unknown":
                    print(f"  - {key}: {value}")
        else:
            print("‚ÑπÔ∏è Not running in Docker environment")
        
        return True
    except Exception as e:
        print(f"‚ùå Docker info test failed: {e}")
        return False


def test_github_actions_info():
    """GitHub ActionsÁí∞Â¢ÉÊÉÖÂ†±„ÅÆ„ÉÜ„Çπ„Éà"""
    print("\n=== GitHub ActionsÁí∞Â¢ÉÊÉÖÂ†±„ÉÜ„Çπ„Éà ===")
    
    try:
        github_info = version_module.get_github_actions_info()
        print(f"‚úÖ GitHub Actions info retrieved: {len(github_info)} fields")
        
        has_github_env = any(github_info.values())
        if has_github_env:
            print("üîß GitHub Actions environment detected:")
            for key, value in github_info.items():
                if value:
                    print(f"  - {key}: {value}")
        else:
            print("‚ÑπÔ∏è Not running in GitHub Actions environment")
        
        return True
    except Exception as e:
        print(f"‚ùå GitHub Actions info test failed: {e}")
        return False


def test_effective_version():
    """ÂÆüÂäπ„Éê„Éº„Ç∏„Éß„É≥„ÅÆ„ÉÜ„Çπ„Éà"""
    print("\n=== ÂÆüÂäπ„Éê„Éº„Ç∏„Éß„É≥„ÉÜ„Çπ„Éà ===")
    
    try:
        effective_version = version_module.get_effective_version()
        static_version = version_module.__version__
        
        print(f"‚úÖ Effective version: {effective_version}")
        print(f"‚úÖ Static version: {static_version}")
        
        if effective_version != static_version:
            print("üîÑ Version override detected (Docker/GitHub Actions/Git)")
        else:
            print("üìã Using static version")
        
        return True
    except Exception as e:
        print(f"‚ùå Effective version test failed: {e}")
        return False


def test_version_priority():
    """„Éê„Éº„Ç∏„Éß„É≥ÂÑ™ÂÖàÈ†Ü‰Ωç„ÅÆ„ÉÜ„Çπ„Éà"""
    print("\n=== „Éê„Éº„Ç∏„Éß„É≥ÂÑ™ÂÖàÈ†Ü‰Ωç„ÉÜ„Çπ„Éà ===")
    
    try:
        # ÂêÑÁí∞Â¢É„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó
        docker_info = version_module.get_docker_info()
        github_info = version_module.get_github_actions_info()
        package_version = version_module.get_package_json_version()
        git_info = version_module.get_git_info()
        static_version = version_module.__version__
        
        priority_source = "static"
        
        # ÂÑ™ÂÖàÈ†Ü‰Ωç„ÅÆÂà§ÂÆö
        if docker_info.get("version") and docker_info["version"] != "unknown":
            priority_source = "docker"
        elif github_info.get("version"):
            priority_source = "github_actions"
        elif package_version and package_version != static_version:
            priority_source = "package_json_ci"
        elif git_info.get("tag"):
            priority_source = "git_tag"
        elif git_info.get("commit_short"):
            priority_source = "git_commit"
        
        print(f"‚úÖ Version source priority: {priority_source}")
        
        # ÂÑ™ÂÖàÈ†Ü‰Ωç„ÅÆË™¨Êòé
        print("üìö Priority order:")
        print("  1. Docker environment variables (highest)")
        print("  2. GitHub Actions environment variables")
        print("  3. package.json (updated by CI/CD)")
        print("  4. Git tags")
        print("  5. Git commit info + static version")
        print("  6. Static version only (lowest)")
        
        return True
    except Exception as e:
        print(f"‚ùå Version priority test failed: {e}")
        return False


def test_package_json_info():
    """„Éë„ÉÉ„Ç±„Éº„Ç∏JSONÊÉÖÂ†±„ÅÆ„ÉÜ„Çπ„Éà"""
    print("\n=== „Éë„ÉÉ„Ç±„Éº„Ç∏JSONÊÉÖÂ†±„ÉÜ„Çπ„Éà ===")
    
    try:
        package_version = version_module.get_package_json_version()
        print(f"‚úÖ Package.json version: {package_version or 'not found'}")
        
        if package_version:
            static_version = version_module.__version__
            if package_version != static_version:
                print(f"üîÑ Version mismatch detected:")
                print(f"  - Static: {static_version}")
                print(f"  - Package.json: {package_version}")
                print(f"  - This indicates CI/CD updated package.json")
            else:
                print(f"üìã Versions match - no CI/CD update yet")
        else:
            print(f"‚ö†Ô∏è package.json not found or no version field")
        
        return True
    except Exception as e:
        print(f"‚ùå Package.json info test failed: {e}")
        return False


def test_full_version_info():
    """ÂÆåÂÖ®„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆ„ÉÜ„Çπ„Éà"""
    print("\n=== ÂÆåÂÖ®„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÉÜ„Çπ„Éà ===")
    
    try:
        full_info = version_module.get_version_info(
            include_git=True,
            include_system=True,
            include_docker=True,
            include_github=True,
            include_package=True
        )
        
        print(f"‚úÖ Full version info retrieved: {len(full_info)} top-level fields")
        
        for key, value in full_info.items():
            if isinstance(value, dict):
                print(f"  - {key}: {len(value)} sub-fields")
                for sub_key, sub_value in value.items():
                    if sub_value:
                        # Èï∑„ÅÑÂÄ§„ÅØÂàá„ÇäË©∞„ÇÅ„Çã
                        display_value = str(sub_value)
                        if len(display_value) > 50:
                            display_value = display_value[:47] + "..."
                        print(f"    ‚Ä¢ {sub_key}: {display_value}")
            else:
                print(f"  - {key}: {value}")
        
        return True
    except Exception as e:
        print(f"‚ùå Full version info test failed: {e}")
        return False


def simulate_environments():
    """Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö„Åó„Å¶„ÅÆ„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„ÉÜ„Çπ„Éà"""
    print("\n=== Áí∞Â¢É„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥„ÉÜ„Çπ„Éà ===")
    
    # ÂÖÉ„ÅÆÁí∞Â¢ÉÂ§âÊï∞„Çí‰øùÂ≠ò
    original_env = {}
    test_vars = [
        "DOCKER_VERSION", "DOCKER_BUILD_DATE", "DOCKER_COMMIT_SHA", "DOCKER_COMMIT_SHORT",
        "GITHUB_RELEASE_VERSION", "GITHUB_REF", "GITHUB_SHA", "GITHUB_REPOSITORY"
    ]
    
    for var in test_vars:
        original_env[var] = os.environ.get(var)
    
    try:
        # Docker„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
        print("\n--- DockerÁí∞Â¢É„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ ---")
        os.environ["DOCKER_VERSION"] = "1.2.3-test"
        os.environ["DOCKER_BUILD_DATE"] = "2025-01-01T00:00:00Z"
        os.environ["DOCKER_COMMIT_SHA"] = "abcd1234" * 8
        os.environ["DOCKER_COMMIT_SHORT"] = "abcd1234"
        
        docker_effective = version_module.get_effective_version()
        print(f"‚úÖ Docker simulated effective version: {docker_effective}")
        
        # GitHub Actions„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÔºàDocker„Çí„ÇØ„É™„Ç¢Ôºâ
        print("\n--- GitHub ActionsÁí∞Â¢É„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ ---")
        os.environ["DOCKER_VERSION"] = "unknown"  # Docker„ÇíÁÑ°ÂäπÂåñ
        os.environ["GITHUB_RELEASE_VERSION"] = "2.3.4-test"
        os.environ["GITHUB_REF"] = "refs/heads/main"
        os.environ["GITHUB_SHA"] = "efgh5678" * 8
        os.environ["GITHUB_REPOSITORY"] = "test/twitter-bulk-blocker"
        
        github_effective = version_module.get_effective_version()
        print(f"‚úÖ GitHub Actions simulated effective version: {github_effective}")
        
        # package.json„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÔºàÊó¢Â≠ò„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®Ôºâ
        print("\n--- package.json„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ ---")
        # GitHub Actions„ÇíÁÑ°ÂäπÂåñ
        os.environ["GITHUB_RELEASE_VERSION"] = ""
        
        package_effective = version_module.get_effective_version()
        print(f"‚úÖ package.json simulated effective version: {package_effective}")
        
        # package.json„ÅÆ„Éê„Éº„Ç∏„Éß„É≥Ë°®Á§∫
        package_version = version_module.get_package_json_version()
        if package_version:
            print(f"üìé package.json version: {package_version}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Environment simulation test failed: {e}")
        return False
    
    finally:
        # ÂÖÉ„ÅÆÁí∞Â¢ÉÂ§âÊï∞„ÇíÂæ©ÂÖÉ
        for var, value in original_env.items():
            if value is None:
                os.environ.pop(var, None)
            else:
                os.environ[var] = value


def main():
    """„É°„Ç§„É≥„ÉÜ„Çπ„ÉàÂÆüË°å"""
    print("üß™ Twitter Bulk Blocker „Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÉÜ„Çπ„Éà")
    print("=" * 60)
    
    tests = [
        ("Âü∫Êú¨„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±", test_basic_version_info),
        ("GitÊÉÖÂ†±", test_git_info),
        ("DockerÁí∞Â¢ÉÊÉÖÂ†±", test_docker_info),
        ("GitHub ActionsÁí∞Â¢ÉÊÉÖÂ†±", test_github_actions_info),
        ("package.jsonÊÉÖÂ†±", test_package_json_info),
        ("ÂÆüÂäπ„Éê„Éº„Ç∏„Éß„É≥", test_effective_version),
        ("„Éê„Éº„Ç∏„Éß„É≥ÂÑ™ÂÖàÈ†Ü‰Ωç", test_version_priority),
        ("ÂÆåÂÖ®„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±", test_full_version_info),
        ("Áí∞Â¢É„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥", simulate_environments),
    ]
    
    results = {}
    for test_name, test_func in tests:
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå Test '{test_name}' crashed: {e}")
            results[test_name] = False
    
    # ÁµêÊûú„Çµ„Éû„É™„Éº
    print("\n" + "=" * 60)
    print("üìä „ÉÜ„Çπ„ÉàÁµêÊûú„Çµ„Éû„É™„Éº")
    print("=" * 60)
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    print(f"\nüéØ Total: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed!")
        return 0
    else:
        print("‚ö†Ô∏è Some tests failed!")
        return 1


if __name__ == "__main__":
    sys.exit(main())